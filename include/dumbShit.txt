#define REGISTER_SERVICE_0_GEN() \
public: \
	template<typename IT, typename T> \
	void registerService(Strategy strategy) { \
	if (_registry.count(&typeid(IT))) { \
		return; \
	} \
	_registry[&typeid(IT)] = new Descriptor(new Factory<T>(), strategy); \
	} \
	\
	template<typename T> \
	void registerService(Strategy strategy) { \
		this->registerService<T, T>(strategy); \
	}

#define REGISTER_SERVICE_1_GEN() \
public: \
template<typename IT, typename T, typename A1> \
void registerService(Strategy strategy, A1 arg1) { \
	if (_registry.count(&typeid(IT))) { \
		return; \
	} \
	_registry[&typeid(IT)] = new Descriptor(new Factory<T, A1>(arg1), strategy); \
	} \
	\
	template<typename T> \
void registerService(Strategy strategy, A1 arg1) { \
	this->registerService<T, T, A1>(strategy, arg1); \
	}

#define REGISTER_SERVICE_2_GEN() \
public: \
template<typename IT, typename T, typename A1, typename A2> \
void registerService(Strategy strategy, A1 arg1, A2 arg2) { \
	if (_registry.count(&typeid(IT))) { \
		return; \
	} \
	IFactory* creator = new Factory1<T, A1, A2>(arg1, arg2); \
	_registry[&typeid(IT)] = new Descriptor(new Factory, strategy); \
	} \
	\
	template<typename T> \
void registerService(Strategy strategy, A1 arg1, A2 arg2) { \
	this->registerService<T, T, A1>(strategy, arg1, arg2); \
	}
